#+TITLE: 关于我
#+AUTHOR: enzo liu
#+EMAIL:  liuenze6516@gmail.com
#+DATE: 2017-08-15
#+URI:         /about/
#+OPTIONS:   H:3 toc:nil num:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

** 个人简介
=刘恩泽=, 男, 联系方式: =liuenze6516#gmail=
*** 上海票牛网 *core developer* *2015 至今*
  - =商品系统=
  - =运营系统= (秒杀，抽奖，优惠券，特卖活动等)
  - =演出票务系统= (座位编辑, 打票, 验票等)
  - =搜索= , =演出推荐= , =spark 数据分析= , =管理系统= 等
  - =监控= , =发布= , =回滚= , =备份= 等运维相关

*** 上海大众点评-交易线-商家系统 *高级软件工程师(P6)* *2013-2015*
  - 点评团购制作系统
  - 制作审核质检系统

*** 南京华为-运营商 BG-企业通讯产品线 *软件工程师* *2011-2013*
  - =即时通讯软件= 服务端开发
  - =VOIP= 和 =企业会议系统= 的业务层开发

*** 南京大学-数学系-基础数学 本科 *4.1/5* *2007-2011*

** 项目经历
*** 票牛网
- 2015-09 信息系统(票档，场次, 演出，场馆，城市) + 商品系统(票) + 用户系统用户
- 2015-10 商家系统(挂票), 邀请注册, 管理后台, 文件服务(qiniu), 订单系统 (下单)
- 2015-11 [app v1.0] 增加反馈，订单发货, 优化演出搜索, 订单通知，用户操作记录, 演出增加类目, 微信第三方登陆,抽奖活动，红包
- 2015-12 微信分享， 订单防刷, 票牛 pc 版, 演出艺人, 订单支持不同取票方式, 库存管理与采购后台, 访问来源分析
- 2016-01 区分商家与个人，增加个人转票, 拼团活动，运营位
- 2016-02 支持多城市，验证码直接登陆，票品区分(连座，不可剩单张，最多最少购买张数), spark 分析日志跑用户 uvpv
- 2016-03 增加 PUSH, 订单优惠支持折扣, 点赞活动
- 2016-04 后台增加场次和场馆管理, 区分演出所在城市和发布城市，增加折扣和热门票, 演出关注与有票通知， 特卖活动
- 2016-05 增加 elk 的日志分析，会员福利，秒杀活动
- 2016-06 相关演出推荐, 订单增加邮费，评论点赞，评论回复，开发环境 docker 搭建(mvn,gitlab,ci)
- 2016-07 消息中心，spark 计算相关演出，zabbix 监控，短信送达报告
- 2016-08 部分非核心业务 duboo 服务化，迪士尼对接
- 2016-09 答题活动, 业务数据备份
- 2016-10 统计内容分库以及服务化, 发布脚本支持多 nginx, 使用阿里云负载均衡
- 2016-11~2017-02 =负责运营团队=
- 2017-03 商家子账户, 商家运营活动，商家分销系统, 票务系统（锁票，打票，验票)
- 2017-04 迁移大数据存储至阿里 odps, 线上 spark 环境, 自动发货系统(对接顺丰自动打印)
- 2017-05 在线选座挂售
- 技术相关: spark, ansible, zabbix, elk, ruby, qiniu, daogen, docker, scala, mysql ...
*** 点评商品制作系统
主要内容都在 =业务系统= 的设计上。
- 为了前台页面的属性化/场景化搜索，完成了 =内容属性化= 及 =分类目属性模板=
- 为了便于销售人员录入，完成了 =模板化编辑=
- 为了提高审核效率，完成了 =AI 质检功能= (本质上基于规则，实现指标系统＆规则系统)
- 为了高效的开展各种新的业务， 完成了 =发布对接系统= (提供部分扩展点进行标准化接入), 接入多种业务产品(代金券，秒杀业务，KTV，闪惠闪付等产品)

*** 即时通讯软件
    负责核心的消息状态群组(PGM)服务器开发
    1. 基于 udp 协议自定义高性能通讯框架(用于客户端-服务端通讯)
       1. 消息分包组包 (考虑到 MTU)
       2. 模拟 tcp 做一次 ~ack~ 提高可靠性, 以及重试机制.
    2. 基于 Actor 模型完成消息, 状态服务器开发
       - 尽可能减少系统中有状态的部分, 状态仅局限在用户/群组信息中

** 技能
*** 编程语言
