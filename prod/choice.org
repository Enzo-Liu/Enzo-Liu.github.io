* 我会考虑几个点
1. 在花旗的什么部门
   - (加分) 交易系统
   - (加分) 风控系统
   - 如果内部系统我就基本不考虑了
2. 考拉的哪个部门
   - 如果内部系统也建议不要考虑
   - 电商部门的话，用户侧偏订单交易，运营活动类有一定复杂度。后台仓配逻辑如果要做提高效率可能会有一定的复杂度。其他的业务部门就需要再看了.
3. 从公司的发展的可能性(公司成长性)来说, 我认为考拉 > 花旗
   - 个人的发展大概率会随着公司成长
4. 如果从技术能力来说
   - 整体来说：
     - 业务分析
     - (复杂业务系统的) 业务架构
       - 电商的业务系统还算是相对复杂的系统
     - (高并发，高可用) 系统架构
     - 分布式系统
   - 从这些角度来评估的话
     - 金融的核心系统门槛肯定会更高(对成长更有利)，如果不是，(感觉)考拉的整体技术氛围应该优于花旗
     - 除了业务分析能力能日常练习，其他如果自己天赋不是特别好，没有相关系统练手，不太可能
   - 技术的发展上
     - 任何一个相对复杂的系统能吃透我觉得都 ok.
     - 想学习金融知识主要靠自己，靠在花旗我觉得没啥用...
       - 可以考一个 cfa，比靠花旗的研发背景靠谱
     - 英语不管在哪里都很重要
     - 其他专项的能力，比如大数据，比如算法，搜索，推荐，分词，比如分布式系统，比如存储，比如 AI, Machine Learning 之类，都有一部分门槛，如果跨不过去，入门都很难. （自己得主动去学，靠机会非常难)
5. 待遇上, (我认为) 几 k 的差异可以忽略...

* 整体来说
如果考虑个人发展，我更建议考拉。
- 能力的发展我觉得更多的靠个人。环境有一部分作用，师傅有更大一部分的作用。但是主要还是个人
- 事业的发展出了能力以外，还有很大一部分机遇的部分，我觉得考拉的可能性更大
- 现阶段的级别，我觉得公司的发展能给你带来的分润都不会很多...这个阶段，还是能力的提升给自己待遇提升的帮助更大. 如果花旗是交易系统等核心系统研发，我应该会选花旗


* 关于选择
1. 投行部算是比较核心的部门。主要业务应该是:
   - 承揽: 对公就是承接公司的融资需求
   - 承做: 金融产品开发(对公一般就是帮企业发债，股权融资, 做 IPO 等)
   - 承销: 卖这些金融产品
   - 研发部门应该不太核心，但是能接触到金融相关概念肯定不少。
2. 考拉主站研发: 应该算是考拉较核心的部门

* 想出国
- 公司
  - 跨国公司国内转是一个途径
  - 直接去面试一些海外公司
    - (基础)算法要求一般不低
    - 英语水平
- 学校
  - 考个 GRE
  - 找人写推荐信

* 技术到底应该怎么学习
** 技术是啥
解决实际问题的能力

** 常见问题
- 业务问题
  - 了解业务背景，分析问题，给出方案
- 复杂的业务问题
  - 和其他业务的冲突
  - 和其他问题的共性
  - 如何拆解成子问题
- 系统问题
  - 慢
  - 稳定(比如前几天宕机)
  - 安全
  - 逻辑出错(如何排查)
  - 研发效率(人多之后怎么办)
  - 业务架构(业务功能太多之后怎么办)
  - 系统架构(和以上都有关系)
  - 其他专项技能(比如搜索怎么做，这些问题一个门槛在能和不能，一个门槛在做好)
- 其他难题
  - 其实难就体现在门槛上而已，会的人少，就算是难题。

** 公司对于发展的差异
我觉得大部分公司应该都差不多。主要有几点差异
- 日常培训机制(培训里，最重要的还是自己，投入度显著影响效果)
- 发展太快, 没人处理难题, 必须顶上(公司发展超过个人发展，会强迫拔高，如果跟上，很好，跟不上，很难发展...)
- 有厉害的团队 (可以看到别人如何做事，和别人多交流学习)
- 一些专业的部门(比如架构组和普通业务研发，解决的问题的门槛就不一样。)

** 怎么学习/提升
我的个人经历/经验:
- 多参与培训(会影响人的视野)
  - 曾经在华为，听到了很多没接触过的东西.
  - 到点评去 qcon 收获也不错.
  - 我不太喜欢太具体(针对具体事务)的培训，对我的帮助不大
- 前 5 年工作中学习很多
  - 问题有时需要自己找，怎么提高开发效率，怎么保证上线后容易发现问题，怎么优化线上稳定性和性能，怎么找到业务的模式做的通用化
- 这两年看书学习很多
  - 首先要有个全盘一点的概念, 有哪些东西可以学，想学什么
  - 最前沿的读论文，其他看一些经典的书籍
- 交流
  - 看别人的经历，看待问题的方式方法, 解决问题的方式方法
- 总结和思考
  - 如果解决的问题多了，能沉淀一些方法，能找到不同模式间更通用的东西
  - 就像说日常用的框架，外貌一直在变，底子就那几种。能整理出脉络，遇到其他问题基本也都能解决。（这个我认为就是技术能力了)
