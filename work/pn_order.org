* 思路
** 订单

1. 由以下部分组成

   - SKU :: 由下订单那一刻起固化下来的信息, 包含 ~演出~ , ~场次~ , ~座位~ , ~价格~ 等信息 (冗余？或者关联？)

   - 买家信息 ::

   - 交易信息 :: (=TODO:= 由于这里一份的产品都不一样--座位， 与 ~SKU~ 的关系需要再思考一下). 包含 ~份数~

2. 包含状态 ~1. 支付中~, ~2. 已付款~, ~3. 已取消~

3. 包含记录信息

   - 付款时间
   - 订单生成时间
   - 补充说明

** 涉及操作

| 操作             | 说明                                                     | 影响实体   | 成功场景         | 失败场景   | 其他                     |
|------------------+----------------------------------------------------------+------------+------------------+------------+--------------------------|
| 下订单           | 用户选择有票场次, 确定票信息下单后即生成订单，保留15分钟 | 票（状态） | 所选择的票均有效 | 存在票无效 | 订单期间票价格变化的处理 |
|------------------+----------------------------------------------------------+------------+------------------+------------+--------------------------|
| 查看历史订单     | 查看不同的状态下我的订单                                 | /          | /                | /          | /                        |
|------------------+----------------------------------------------------------+------------+------------------+------------+--------------------------|
| 卖家的订单查看？ |                                                          |            |                  |            |                          |


** 难点

1. 冲突操作的处理

   - 卖家删除票，只能删除空闲状态的票
   - 买家购买票，只能购买空闲状态的票
   - ~票的状态作为冲突竞争的资源~, 用做每个针对具体票的操作的锁

2. 操作失败的处理

   ?

* 表结构定义

- 订单 ::

- 订单产品 ::
